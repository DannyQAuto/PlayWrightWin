// pages/crmExperienciaPage.ts
import { Page, Locator } from '@playwright/test';
import { BasePage } from './base-page';
import * as fs from 'fs';
import * as path from 'path';

export class CrmExperienciaPage extends BasePage {
// Locators del login
readonly usernameInput: Locator;
readonly passwordInput: Locator;
readonly ingresarButton: Locator;

// Locators del men√∫
readonly crmExperienciaOption: Locator;
readonly crmValidacionesOption: Locator;
readonly validacionAsesorOption: Locator;

// Locators de la p√°gina de validaci√≥n
readonly filtroEstadoSelect: Locator;
readonly filtroBusquedaSelect: Locator;
readonly busquedaInput: Locator;
readonly buscarButton: Locator;
readonly telefonoIcon: Locator;
readonly resultado1Select: Locator;
readonly resultado2Select: Locator;
readonly guardarButton: Locator;
readonly confirmarSiButton: Locator;
readonly okButton: Locator;
readonly comentario: Locator;

constructor(page: Page) {
        super(page);

        // Configurar URL para CRM Experiencia
        this.setCrmExperienciaUrl();

        // Inicializar locators del login
        this.usernameInput = page.locator("//input[@placeholder='Nombre usuario']");
        this.passwordInput = page.locator("//input[@placeholder='Clave']");
        this.ingresarButton = page.locator("//button[normalize-space()='INGRESAR']");

        // Inicializar locators del men√∫
        this.crmExperienciaOption = page.locator("//body/section/aside[@id='leftsidebar']/div[@class='menu']/div[@class='slimScrollDiv']/ul[@class='list']/li[4]/a[1]");
        this.crmValidacionesOption = page.locator("//body/section/aside[@id='leftsidebar']/div[@class='menu']/div[@class='slimScrollDiv']/ul[@class='list']/li/ul[@class='ml-menu']/li[8]/a[1]");
        this.validacionAsesorOption = page.locator("//a[normalize-space()='VALIDACION ASESOR']");

        // Inicializar locators de validaci√≥n
        this.filtroEstadoSelect = page.locator("//select[@id='busca_estado']");
        this.filtroBusquedaSelect = page.locator("//select[@id='cb_busca_columna']");
        this.busquedaInput = page.locator("//input[@id='txt_busca']");
        this.buscarButton = page.locator("//a[@class='btn btn-block btn-info waves-effect']");
        this.telefonoIcon = page.locator("//i[@class='material-icons'][contains(text(),'settings_phone')]");
        this.resultado1Select = page.locator("//select[@id='cb_resultado1']");
        this.resultado2Select = page.locator("//select[@id='cb_resultado2']");
        this.guardarButton = page.locator("//button[@id='bt_guardar']");
        this.confirmarSiButton = page.locator("//button[@id='boton_enviar_validacion']");
        this.okButton = page.locator("//button[contains(@class,'confirm') and contains(text(),'OK')]");
        this.comentario = page.locator("//textarea[@id='txt_descripcion_validacion']");
    }

    // ‚ñ∫‚ñ∫‚ñ∫ M√âTODO PARA OBTENER EL √öLTIMO DNI DEL JSON
    async obtenerUltimoDni(): Promise<string> {
        try {
            const dnisPath = path.join(__dirname, '../specs/dnis.json');
            console.log(`üìÅ Buscando archivo en: ${dnisPath}`);

            if (fs.existsSync(dnisPath)) {
                const dnisData = fs.readFileSync(dnisPath, 'utf8');
                const dnisJson = JSON.parse(dnisData);

                const ventasExitosas = dnisJson.ventasExitosas;
                if (ventasExitosas && ventasExitosas.length > 0) {
                    const ultimoDni = ventasExitosas[ventasExitosas.length - 1];
                    console.log(`üìÑ √öltimo DNI obtenido del JSON: ${ultimoDni}`);
                    console.log(`üìä Total de DNIs en el array: ${ventasExitosas.length}`);
                    return ultimoDni;
                } else {
                    console.log('‚ö†Ô∏è El array ventasExitosas est√° vac√≠o');
                }
            } else {
                console.log('‚ö†Ô∏è No se encontr√≥ el archivo dnis.json');
            }
        } catch (error: any) {
            console.log('‚ùå Error leyendo archivo DNIs:', error.message);
        }

        console.log('üîÑ Usando DNI por defecto: 44417747');
        return '44417747';
    }

    // ‚ñ∫‚ñ∫‚ñ∫ M√âTODO PARA NAVEGAR AL LOGIN ESPEC√çFICO DE CRM EXPERIENCIA
    async navigateToCrmExperienciaLogin(): Promise<void> {
        console.log('üåê Navegando al login de CRM Experiencia...');
        await this.navigateTo('pages/login_form.php');
    }

    // M√©todo para realizar login
    async login(username: string = '73451263', password: string = '73451263'): Promise<void> {
        console.log('üîê Realizando login en CRM Experiencia...');
        await this.navigateToCrmExperienciaLogin();
        await this.fillField(this.usernameInput, username);
        await this.fillField(this.passwordInput, password);
        await this.waitAndClick(this.ingresarButton);
        await this.waitForPageLoad();
        console.log('‚úÖ Login en CRM Experiencia completado');
    }

    // M√©todo para navegar al m√≥dulo de validaci√≥n asesor
    async navegarAValidacionAsesor(): Promise<void> {
        console.log('üß≠ Navegando al m√≥dulo de validaci√≥n asesor...');

        await this.waitAndClick(this.crmExperienciaOption);
        await this.waitAndClick(this.crmExperienciaOption);
        await this.waitAndClick(this.crmExperienciaOption);

        await this.waitAndClick(this.crmValidacionesOption);

        await this.waitAndClick(this.validacionAsesorOption);
        await this.waitForPageLoad();
        console.log('‚úÖ Navegaci√≥n completada');
    }

    // M√©todo para configurar filtros de b√∫squeda (ACTUALIZADO)
    async configurarFiltros(dni?: string): Promise<string> {
        console.log('‚öôÔ∏è Configurando filtros de b√∫squeda...');

        // Obtener el DNI (del par√°metro o del JSON)
        let dniABuscar = dni;
        if (!dniABuscar) {
            dniABuscar = await this.obtenerUltimoDni();
        }

        // Seleccionar "FILTRAR:" en el filtro de estado
        await this.selectOptionByLabel(this.filtroEstadoSelect, 'FILTRAR:');
        await this.page.waitForTimeout(500);

        // Seleccionar "Nro documento" en el filtro de b√∫squeda
        await this.selectOptionByLabel(this.filtroBusquedaSelect, 'Nro documento');
        await this.page.waitForTimeout(500);

        // Ingresar DNI
        await this.fillField(this.busquedaInput, dniABuscar);
        console.log(`‚úÖ Filtros configurados para DNI: ${dniABuscar}`);

        return dniABuscar;
    }

    // M√©todo para realizar b√∫squeda
    async realizarBusqueda(): Promise<void> {
        console.log('üîç Realizando b√∫squeda...');
        await this.waitAndClick(this.buscarButton);

        // Esperar a que los resultados carguen
        await this.page.waitForTimeout(2000);
        console.log('‚úÖ B√∫squeda completada');
    }

    // M√©todo para procesar resultado (hacer clic en tel√©fono)
    async procesarResultado(): Promise<void> {
        console.log('üìû Procesando resultado...');

        // Hacer clic en el √≠cono del tel√©fono
        await this.waitAndClick(this.telefonoIcon);

        // Esperar a que se carguen los selects
        await this.page.waitForTimeout(1000);
        console.log('‚úÖ Resultado procesado');
    }

    // M√©todo para completar validaci√≥n
    async completarValidacion(comentario1: string = 'danny prueba'): Promise<void> {
        console.log('üìù Completando validaci√≥n...');

        // Seleccionar "APROBADO" en el primer select
        await this.selectOptionByValue(this.resultado1Select, '1');
        await this.page.waitForTimeout(500);

        // Seleccionar "TODO CORRECTO" en el segundo select
        await this.selectOptionByValue(this.resultado2Select, '1');
        await this.page.waitForTimeout(500);

        await this.fillField(this.comentario, comentario1);
        console.log('‚úÖ Comentario agregado');

        // Hacer clic en Guardar
        await this.waitAndClick(this.guardarButton);
        console.log('‚úÖ Validaci√≥n completada');
    }

    // M√©todo para confirmar en modal
    async confirmarModal(): Promise<void> {
        console.log('‚úÖ Confirmando acci√≥n en modal...');

        // Hacer clic en SI
        await this.waitAndClick(this.confirmarSiButton);
        await this.page.waitForTimeout(1000);

        // Hacer clic en OK
        await this.waitAndClick(this.okButton);
        console.log('‚úÖ Confirmaci√≥n completada');
    }

    // M√©todo completo que ejecuta todo el flujo (ACTUALIZADO)
    async ejecutarFlujoCompleto(dni?: string): Promise<void> {
        console.log('\nüöÄ INICIANDO FLUJO COMPLETO DE VALIDACI√ìN CRM');
        console.log('‚ïê'.repeat(60));

        try {
            await this.login();
            await this.navegarAValidacionAsesor();

            // Obtener el DNI usado (del par√°metro o del JSON)
            const dniUsado = await this.configurarFiltros(dni);

            await this.realizarBusqueda();

            // Verificar si hay resultados antes de continuar
            const hayResultados = await this.isElementVisible(this.telefonoIcon, 5000);
            if (hayResultados) {
                await this.procesarResultado();
                await this.completarValidacion();
                await this.confirmarModal();
                console.log(`‚úÖ Validaci√≥n completada para DNI: ${dniUsado}`);
            } else {
                console.log(`‚ùå No se encontraron registros para DNI: ${dniUsado}`);
                console.log('üí° Revisa que el DNI exista en el sistema');
            }

            console.log('‚ïê'.repeat(60));
            console.log('üéâ FLUJO COMPLETADO EXITOSAMENTE');

        } catch (error) {
            console.log('‚ùå Error en el flujo:', error);
            throw error;
        }
    }

    // ‚ñ∫‚ñ∫‚ñ∫ M√âTODO ADICIONAL: Para cambiar espec√≠ficamente a la URL de CRM Experiencia
    async setCrmExperienciaUrl(): Promise<void> {
        this.setBaseUrl('http://10.23.100.24/proy_RM/Win.CRM_EXPERIENCIA');
        console.log('‚úÖ URL configurada espec√≠ficamente para CRM Experiencia');
    }

    // ‚ñ∫‚ñ∫‚ñ∫ M√âTODO ADICIONAL: Para verificar que estamos en la URL correcta
    async verificarUrlCrmExperiencia(): Promise<boolean> {
        const currentUrl = await this.getCurrentUrl();
        const isCrmExperiencia = currentUrl.includes('10.23.100.24/proy_RM');
        console.log(`üîç Verificaci√≥n URL CRM Experiencia: ${isCrmExperiencia ? '‚úÖ' : '‚ùå'}`);
        return isCrmExperiencia;
    }

    // ‚ñ∫‚ñ∫‚ñ∫ M√âTODO ADICIONAL: Para probar la lectura del JSON
    async probarLecturaDni(): Promise<void> {
        const ultimoDni = await this.obtenerUltimoDni();
        console.log(`üß™ DNI obtenido en prueba: ${ultimoDni}`);
    }
}